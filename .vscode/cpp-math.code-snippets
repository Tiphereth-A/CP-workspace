{
    // Place your CP-workplace workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "lagrange-interpolation-fixed-key": {
        "scope": "cpp",
        "prefix": [
            "lagrange-interpolation-fixed-key"
        ],
        "body": [
            "// calculate f(x) % mod, which f(i) = v[i], i in [0, v.size())",
            "// f(x)=\\sum_{i=0}^{n-1} v_i \\prod_{j\\ne i} \\frac{x-x_j}{x_i-x_j}",
            "//     =\\sum_{i=0}^{n-1} v_i \\prod_{j\\ne i} \\frac{x-j}{i-j}",
            "//     =\\sum_{i=0}^{n-1} (-1)^{n-i-1} v_i \\frac{(\\prod_{j<i} x-j)(\\prod_{j>i} x-j)}{i!(n-i-1)!}",
            "// complexity: O(n)",
            "int64_t lagrange_interp_fixed_key(std::vector<int64_t> const &v, uint64_t x, int64_t mod) {",
            "const size_t n = v.size();",
            "if (x < n) return v[x];",
            "//? pre-proceed",
            "std::vector<int64_t> ifact(n);",
            "ifact[0] = ifact[1] = 1;",
            "for (size_t i = 2; i < n; ++i) ifact[i] = mod - mod / i * ifact[mod % i] % mod;",
            "for (size_t i = 3; i < n; ++i) (ifact[i] *= ifact[i - 1]) %= mod;",
            "//? pre-proceed end",
            "std::vector<int64_t> pre(n);",
            "for (size_t i = 0; i < n; ++i) pre[i] = x - i;",
            "for (size_t i = 1; i < n; ++i) (pre[i] *= pre[i - 1]) %= mod;",
            "std::vector<int64_t> suc(n);",
            "for (size_t i = 0; i < n; ++i) suc[i] = x - i;",
            "for (ptrdiff_t i = n - 2; i >= 0; --i) (suc[i] *= suc[i + 1]) %= mod;",
            "int64_t ans = 0;",
            "for (size_t i = 0; i < n; ++i) {",
            "int64_t _ = v[i];",
            "if (i) _ = _ * pre[i - 1] % mod;",
            "if (i + 1 < n) _ = _ * suc[i + 1] % mod;",
            "_ = _ * ifact[i] % mod * ifact[n - i - 1] % mod;",
            "ans = (ans + ((n - i) % 2 ? _ : mod - _)) % mod;",
            "}",
            "return ans;",
            "}"
        ]
    }
}