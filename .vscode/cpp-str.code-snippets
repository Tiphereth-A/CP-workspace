{
    // Place your CP-workplace workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "KMP-FFT": {
        "scope": "cpp",
        "prefix": [
            "kmp-fft",
            "fft-kmp"
        ],
        "body": [
            "//! requires FFT",
            "//! EPS should be a little larger (about <length of string> * <minimum character> * <normal EPS (such as 1e-6)>)",
            "namespace FFT_KMP {",
            "const double EPS = 1e2;",
            "// KMP",
            "std::vector<size_t> match_normal(std::string_view s, std::string_view t) {",
            "size_t m = s.size(), n = t.size();",
            "std::vector<double> a(m), b(n), f(n);",
            "std::copy(s.begin(), s.end(), a.rbegin());",
            "std::copy(t.begin(), t.end(), b.begin());",
            "double T = std::accumulate(a.begin(), a.end(), .0, [](auto &&x, auto &&y) { return x + y * y; });",
            "std::partial_sum(b.begin(), b.end(), f.begin(), [](auto &&x, auto &&y) { return x + y * y; });",
            "std::vector<double> g = FFT::conv(a, b);",
            "std::vector<size_t> res;",
            "for (size_t i = m - 1; i < n; ++i)",
            "if (abs(T + f[i] - (i < m ? 0 : f[i - m]) - 2 * g[i]) < EPS) res.push_back(i - m + 1);",
            "return res;",
            "}",
            "// KMP with wildcard `*`",
            "std::vector<size_t> match_star(std::string_view s, std::string_view t) {",
            "size_t m = s.size(), n = t.size();",
            "std::vector<double> a(m), aa(m), b(n), bb(m);",
            "for (size_t i = 0; i < m; ++i) a[m - i - 1] = s[i] == '*' ? 0 : s[i];",
            "aa = a;",
            "for (size_t i = 0; i < n; ++i) b[i] = t[i] == '*' ? 0 : t[i];",
            "bb = b;",
            "std::for_each(aa.begin(), aa.end(), [](auto &&x) { x = x * x * x; });",
            "std::for_each(bb.begin(), bb.end(), [](auto &&x) { x = x * x * x; });",
            "std::vector<double> f = FFT::conv(aa, b), g = FFT::conv(a, bb);",
            "std::for_each(a.begin(), a.end(), [](auto &&x) { x = x * x; });",
            "std::for_each(b.begin(), b.end(), [](auto &&x) { x = x * x; });",
            "std::vector<double> h = FFT::conv(a, b);",
            "std::vector<size_t> res;",
            "for (size_t i = m - 1; i < n; ++i)",
            "if (abs(f[i] + g[i] - 2 * h[i]) < EPS) res.push_back(i - m + 1);",
            "return res;",
            "}",
            "}  // namespace FFT_KMP"
        ]
    }
}