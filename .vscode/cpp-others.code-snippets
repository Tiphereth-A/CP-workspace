{
    // Place your CP-workplace workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "init-cpp-simple": {
        "scope": "cpp",
        "prefix": ["iis", "init_simple"],
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using i64 = int64_t;",
            "using u64 = uint64_t;",
            "\nconst int N = 1e5 + 5;",
            "\nint main() {",
            "\t$0",
            "\treturn 0;",
            "}"
        ]
    },
    "init-cpp": {
        "scope": "cpp",
        "prefix": ["ii", "init"],
        "body": [
            "#ifndef DISABLE_PRAGMA",
            "#pragma GCC optimize (\"Ofast\")",
            "#pragma GCC optimize (\"unroll-loops\")",
            "#endif",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "using i64 = int64_t;",
            "using u64 = uint64_t;",
            "using i128 = __int128_t;",
            "using u128 = __uint128_t;",
            "using pii = pair<int, int>;",
            "\n#define _for(i, l, r, vals...) for (decltype(l + r) i = (l), i##end = (r), ##vals; i <= i##end; ++i)",
            "#define _rfor(i, r, l, vals...) for (make_signed_t<decltype(r - l)> i = (r), i##end = (l), ##vals; i >= i##end; --i)",
            "#define _foreach_val(i, container) for (auto i : container)",
            "#define _foreach_ref(i, container) for (auto &i : container)",
            "#define _foreach_cref(i, container) for (const auto &i : container)",
            "#define _foreach_rref(i, container) for (auto &&i : container)",
            "#define _foreach_iter(it, container) for (auto it = (container).begin(); it != (container).end(); ++it)",
            "#define _foreach_iter_range(it, container, l, r) for (auto it = (container).begin() + l; it != (container).begin() + r; ++it)",
            "#define _ins(a) std::inserter((a), (a).begin())",
            "#define _all(a) (a).begin(), (a).end()",
            "#define _set_nul(a) memset(a, 0, sizeof(a))",
            "#define _set_inf(a) memset(a, 0x3f, sizeof(a))",
            "#define _set_nul_n(a, n) memset(a, 0, sizeof(*(a)) * (n))",
            "#define _set_inf_n(a, n) memset(a, 0x3f, sizeof(*(a)) * (n))",
            "#define _run_exit(expressions) _run_return(expressions, 0)",
            "#define _run_return(expressions, val) return (expressions), val",
            "#define _run_return_void(expressions) \\",
            "\t{                         \\",
            "\t\texpressions;            \\",
            "\t\treturn;                 \\",
            "\t}",
            "#define _run_break(expressions) \\",
            "\t{                           \\",
            "\t\texpressions;            \\",
            "\t\tbreak;                  \\",
            "\t}",
            "#define _run_continue(expressions) \\",
            "\t{                              \\",
            "\t\texpressions;               \\",
            "\t\tcontinue;                  \\",
            "\t}",
            "#define _mid(l, r) ((l) + (((r) - (l)) >> 1))",
            "#define _len(l, r) ((r) - (l) + 1)",
            "#define _lowbit(x) (1 << __builtin_ctz(x))",
            "#define _lowbit_64(x) (1 << __builtin_ctzll(x))",
            "#define _debug                                              \\",
            "\t{                                                       \\",
            "\t\tfprintf(stderr, \"%d %s\\n\", __LINE__, __FUNCTION__); \\",
            "\t\tfflush(stderr);                                     \\",
            "\t}",
            "\ntemplate <class T>",
            "bool chkmin(T &a, T b) { return b < a ? a = b, true : false; }",
            "template <class T>",
            "bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }",
            "\nconst uint32_t OFFSET = 5;",
            "const uint32_t N = 1e5 + OFFSET, M = 2e5 + OFFSET, K = 21;",
            "const uint32_t MOD = 1e9 + 7;",
            "const double EPS = 1e-6;",
            "const int INF = 0x3f3f3f3f;",
            "const i64 INFLL = 0x3f3f3f3f3f3f3f3f;",
            "const double PI = acos(-1.0);",
            "const pii DIR4[4] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};",
            "const pii DIR8[8] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};",
            "const int EXP10[10] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};",
            "const int FACT[11] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800};",
            "\nconstexpr auto __STATIC__ = []() { return 0.0; }();",
            "\n#define MULTI_CASES",
            "inline auto solve() -> void {",
            "$0",
            "}",
            "\nint main() {",
            "#ifdef _LOCAL_",
            "\tauto _CLOCK_ST = std::chrono::steady_clock::now();",
            "#endif",
            "\n\tios::sync_with_stdio(false);",
            "\tcin.tie(nullptr);",
            "\tcout.tie(nullptr);",
            "\n#ifdef MULTI_CASES",
            "\tint _t;",
            "\tcin >> _t;",
            "\twhile (_t--)",
            "#endif",
            "\t\tsolve();",
            "\n#ifdef _LOCAL_",
            "\tstd::clog << \"\\n---\\n\"",
            "\t          << \"Time used: \" << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - _CLOCK_ST).count() << \" ms\" << std::endl;",
            "#endif",
            "\treturn 0;",
            "}"
        ]
    },
    "init-cpp-with-fastIO": {
        "scope": "cpp",
        "prefix": ["iifio", "init-fast-io"],
        "body": [
            "#ifndef DISABLE_PRAGMA",
            "#pragma GCC optimize (\"Ofast\")",
            "#pragma GCC optimize (\"unroll-loops\")",
            "#endif",
            "#include <bits/stdc++.h>",
            "\nnamespace fast_io {",
            "namespace type_traits {",
            "template <class Tp>",
            "using is_int = typename std::conditional<(std::is_integral<Tp>::value && std::is_signed<Tp>::value) || std::is_same<Tp, __int128_t>::value, std::true_type, std::false_type>::type;",
            "\ntemplate <class Tp>",
            "using is_uint = typename std::conditional<(std::is_integral<Tp>::value && std::is_unsigned<Tp>::value) || std::is_same<Tp, __uint128_t>::value, std::true_type, std::false_type>::type;",
            "\ntemplate <class Tp>",
            "using make_uint = typename std::conditional<std::is_same<Tp, __int128_t>::value, __uint128_t, typename std::conditional<std::is_signed<Tp>::value, std::make_unsigned<Tp>, std::common_type<Tp>>::type>::type;",
            "}  // namespace type_traits",
            "\ntemplate <size_t BUFFER_SIZE>",
            "class FastIn {",
            "\tusing self = FastIn<BUFFER_SIZE>;",
            "\nprotected:",
            "\tchar buffer_[BUFFER_SIZE], *now_ = buffer_, *end_ = buffer_;",
            "\tFILE *file_;",
            "\npublic:",
            "\texplicit FastIn(FILE *file = stdin) noexcept: file_(file) {}",
            "\n\tinline char fetch() noexcept { return this->now_ == this->end_ && (this->end_ = (this->now_ = this->buffer_) + fread(this->buffer_, 1, BUFFER_SIZE, this->file_), this->now_ == this->end_) ? EOF : *(this->now_)++; }",
            "\tinline char visit() noexcept { return this->now_ == this->end_ && (this->end_ = (this->now_ = this->buffer_) + fread(this->buffer_, 1, BUFFER_SIZE, this->file_), this->now_ == this->end_) ? EOF : *(this->now_); }",
            "\tinline void set_file(FILE *file) noexcept {",
            "\t\tthis->file_ = file;",
            "\t\tnow_ = end_ = buffer_;",
            "\t}",
            "\n\ttemplate <typename Tp, typename std::enable_if<type_traits::is_int<Tp>::value>::type * = nullptr>",
            "\tinline self &read(Tp &n) noexcept {",
            "\t\tbool is_neg = false;",
            "\t\tchar ch = this->fetch();",
            "\t\twhile (!isdigit(ch)) {",
            "\t\t\tis_neg |= ch == '-';",
            "\t\t\tch = this->fetch();",
            "\t\t}",
            "\t\tn = 0;",
            "\t\twhile (isdigit(ch)) {",
            "\t\t\t(n *= 10) += ch & 0x0f;",
            "\t\t\tch = this->fetch();",
            "\t\t}",
            "\t\tif (is_neg) n = -n;",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate <typename Tp, typename std::enable_if<type_traits::is_uint<Tp>::value>::type * = nullptr>",
            "\tinline self &read(Tp &n) noexcept {",
            "\t\tchar ch = this->fetch();",
            "\t\twhile (!isdigit(ch)) ch = this->fetch();",
            "\t\tn = 0;",
            "\t\twhile (isdigit(ch)) {",
            "\t\t\t(n *= 10) += ch & 0x0f;",
            "\t\t\tch = this->fetch();",
            "\t\t}",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &read(char &n) noexcept {",
            "\t\tn = this->fetch();",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &read(char *n) noexcept {",
            "\t\tchar *n_ = n;",
            "\t\twhile (!isgraph(*n_ = this->fetch()));",
            "\t\twhile (isgraph(*(++n_) = this->fetch()));",
            "\t\t*n_ = '\\0';",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &read(std::string &n) noexcept {",
            "\t\tn.clear();",
            "\t\tchar n_;",
            "\t\twhile (!isgraph(n_ = this->fetch()));",
            "\t\tn.push_back(n_);",
            "\t\twhile (isgraph(n_ = this->fetch())) n.push_back(n_);",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &getline(char *n) noexcept {",
            "\t\tchar *n_ = n;",
            "\t\twhile (!isprint(*n_ = this->fetch()));",
            "\t\twhile (isprint(*(++n_) = this->fetch()));",
            "\t\t*n_ = '\\0';",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &getline(std::string &n) noexcept {",
            "\t\tchar n_;",
            "\t\twhile (!isprint(n_ = this->fetch()));",
            "\t\tn.push_back(n_);",
            "\t\twhile (isprint(n_ = this->fetch())) n.push_back(n_);",
            "\t\treturn *this;",
            "\t}",
            "};",
            "\ntemplate <size_t BUFFER_SIZE, size_t INT_BUFFER_SIZE>",
            "class FastOut {",
            "\tusing self = FastOut<BUFFER_SIZE, INT_BUFFER_SIZE>;",
            "\nprivate:",
            "\tchar int_buffer_[INT_BUFFER_SIZE], *now_ib_;",
            "\nprotected:",
            "\tchar buffer_[BUFFER_SIZE], *now_ = buffer_;",
            "\tconst char * const end_ = buffer_ + BUFFER_SIZE;",
            "\tFILE *file_;",
            "\npublic:",
            "\texplicit FastOut(FILE *file = stdout) noexcept: file_(file) {}",
            "\t~FastOut() noexcept { this->flush(); }",
            "\n\tinline void flush() noexcept {",
            "\t\tfwrite(this->buffer_, 1, this->now_ - this->buffer_, this->file_);",
            "\t\tthis->now_ = this->buffer_;",
            "\t}",
            "\t\tinline void set_file(FILE *file) noexcept {",
            "\t\tthis->file_ = file;",
            "\t}",
            "\n\tinline self &linebreak() noexcept {",
            "\t\tthis->write('\\n');",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &space() noexcept {",
            "\t\tthis->write(' ');",
            "\t\treturn *this;",
            "\t}",
            "\n\tinline self &write(const char &n) noexcept {",
            "\t\tif (this->now_ == this->end_) this->flush();",
            "\t\t*(this->now_++) = n;",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &write(const char *n) noexcept {",
            "\t\tsize_t len = strlen(n), l_;",
            "\t\tconst char *n_ = n;",
            "\t\twhile (this->now_ + len >= this->end_) {",
            "\t\t\tl_ = this->end_ - this->now_;",
            "\t\t\tmemcpy(this->now_, n_, l_);",
            "\t\t\tthis->now_ += l_;",
            "\t\t\tn_ += l_;",
            "\t\t\tlen -= l_;",
            "\t\t\tthis->flush();",
            "\t\t}",
            "\t\tmemcpy(this->now_, n_, len);",
            "\t\tthis->now_ += len;",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate <class Tp, typename std::enable_if<type_traits::is_int<Tp>::value>::type * = nullptr>",
            "\tinline self &write(Tp n) noexcept {",
            "\t\tif (n < 0) {",
            "\t\t\tthis->write('-');",
            "\t\t\tn = -n;",
            "\t\t}",
            "\t\treturn this->write(static_cast<typename type_traits::make_uint<Tp>::type>(n));",
            "\t}",
            "\ttemplate <class Tp, typename std::enable_if<type_traits::is_uint<Tp>::value>::type * = nullptr>",
            "\tinline self &write(Tp n) noexcept {",
            "\t\tthis->now_ib_ = this->int_buffer_ + INT_BUFFER_SIZE - 1;",
            "\t\tdo { *(--(this->now_ib_)) = char(n % 10) | '0'; } while (n /= 10);",
            "\t\tthis->write(this->now_ib_);",
            "\t\treturn *this;",
            "\t}",
            "\tinline self &write(const std::string &str) noexcept {",
            "\t\tthis->write(str.c_str());",
            "\t\treturn *this;",
            "\t}",
            "};",
            "\nconst std::size_t BUFFER_SIZE = 1 << 21;",
            "FastIn<BUFFER_SIZE> fast_in;",
            "FastOut<BUFFER_SIZE, 21> fast_out;",
            "}  // namespace fast_io",
            "using fast_io::fast_in;",
            "using fast_io::fast_out;",
            "\nusing namespace std;",
            "using i64 = int64_t;",
            "using u64 = uint64_t;",
            "using i128 = __int128_t;",
            "using u128 = __uint128_t;",
            "using pii = pair<int, int>;",
            "\n#define _for(i, l, r, vals...) for (decltype(l + r) i = (l), i##end = (r), ##vals; i <= i##end; ++i)",
            "#define _rfor(i, r, l, vals...) for (make_signed_t<decltype(r - l)> i = (r), i##end = (l), ##vals; i >= i##end; --i)",
            "#define _foreach_val(i, container) for (auto i : container)",
            "#define _foreach_ref(i, container) for (auto &i : container)",
            "#define _foreach_cref(i, container) for (const auto &i : container)",
            "#define _foreach_rref(i, container) for (auto &&i : container)",
            "#define _foreach_iter(it, container) for (auto it = (container).begin(); it != (container).end(); ++it)",
            "#define _foreach_iter_range(it, container, l, r) for (auto it = (container).begin() + l; it != (container).begin() + r; ++it)",
            "#define _ins(a) std::inserter((a), (a).begin())",
            "#define _all(a) (a).begin(), (a).end()",
            "#define _set_nul(a) memset(a, 0, sizeof(a))",
            "#define _set_inf(a) memset(a, 0x3f, sizeof(a))",
            "#define _set_nul_n(a, n) memset(a, 0, sizeof(*(a)) * (n))",
            "#define _set_inf_n(a, n) memset(a, 0x3f, sizeof(*(a)) * (n))",
            "#define _run_exit(expressions) _run_return(expressions, 0)",
            "#define _run_return(expressions, val) return (expressions), val",
            "#define _run_return_void(expressions) \\",
            "\t{                         \\",
            "\t\texpressions;            \\",
            "\t\treturn;                 \\",
            "\t}",
            "#define _run_break(expressions) \\",
            "\t{                           \\",
            "\t\texpressions;            \\",
            "\t\tbreak;                  \\",
            "\t}",
            "#define _run_continue(expressions) \\",
            "\t{                              \\",
            "\t\texpressions;               \\",
            "\t\tcontinue;                  \\",
            "\t}",
            "#define _mid(l, r) ((l) + (((r) - (l)) >> 1))",
            "#define _len(l, r) ((r) - (l) + 1)",
            "#define _lowbit(x) (1 << __builtin_ctz(x))",
            "#define _lowbit_64(x) (1 << __builtin_ctzll(x))",
            "#define _debug                                              \\",
            "\t{                                                       \\",
            "\t\tfprintf(stderr, \"%d %s\\n\", __LINE__, __FUNCTION__); \\",
            "\t\tfflush(stderr);                                     \\",
            "\t}",
            "\ntemplate <class T>",
            "bool chkmin(T &a, T b) { return b < a ? a = b, true : false; }",
            "template <class T>",
            "bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }",
            "\nconst uint32_t OFFSET = 5;",
            "const uint32_t N = 1e5 + OFFSET, M = 2e5 + OFFSET, K = 21;",
            "const uint32_t MOD = 1e9 + 7;",
            "const double EPS = 1e-6;",
            "const int INF = 0x3f3f3f3f;",
            "const i64 INFLL = 0x3f3f3f3f3f3f3f3f;",
            "const double PI = acos(-1.0);",
            "const pii DIR4[4] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};",
            "const pii DIR8[8] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};",
            "const int EXP10[10] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};",
            "const int FACT[11] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800};",
            "\nconstexpr auto __STATIC__ = []() { return 0.0; }();",
            "\n#define MULTI_CASES",
            "inline auto solve() -> void {",
            "$0",
            "}",
            "\nint main() {",
            "#ifdef _LOCAL_",
            "\tauto _CLOCK_ST = std::chrono::steady_clock::now();",
            "#endif",
            "\n#ifdef MULTI_CASES",
            "\tint _t;",
            "\tfast_in.read(_t);",
            "\twhile (_t--)",
            "#endif",
            "\t\tsolve();",
            "\n#ifdef _LOCAL_",
            "\tstd::clog << \"\\n---\\n\"",
            "\t          << \"Time used: \" << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - _CLOCK_ST).count() << \" ms\" << std::endl;",
            "#endif",
            "\treturn 0;",
            "}"
        ]
    },
    "foreach": {
        "scope": "cpp",
        "prefix": ["fors", "foreach"],
        "body": [
            "#define _for(i, l, r, vals...) for (decltype(l + r) i = (l), i##end = (r), ##vals; i <= i##end; ++i)",
            "#define _rfor(i, r, l, vals...) for (make_signed_t<decltype(r - l)> i = (r), i##end = (l), ##vals; i >= i##end; --i)",
            "#define _foreach_val(i, container) for (auto i : container)",
            "#define _foreach_ref(i, container) for (auto& i : container)",
            "#define _foreach_cref(i, container) for (const auto& i : container)",
            "#define _foreach_rref(i, container) for (auto&& i : container)",
            "#define _foreach_iter(it, container) for (auto it = (container).begin(); it != (container).end(); ++it)",
            "#define _foreach_iter_range(it, container, l, r) for (auto it = (container).begin() + l; it != (container).begin() + r; ++it)"
        ]
    },
    "ostream-int128": {
        "scope": "cpp",
        "prefix": ["os128", "out128", "cout128"],
        "body": [
            "ostream& operator<<(ostream& os, i128 n) {",
            "\tif (n < 0) {",
            "\t\tos << '-';",
            "\t\tn = -n;",
            "\t}",
            "\tif (n > 9) os << (i128)(n / 10);",
            "\tos << (uint_fast16_t)(n % 10);",
            "\treturn os;",
            "}",
            "ostream& operator<<(ostream& os, u128 n) {",
            "\tif (n > 9) os << (u128)(n / 10);",
            "\tos << (uint_fast16_t)(n % 10);",
            "\treturn os;",
            "}"
        ]
    }
}
